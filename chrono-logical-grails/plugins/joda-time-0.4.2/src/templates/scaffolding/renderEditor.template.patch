--- renderEditor.template
+++ src/templates/scaffolding/renderEditor.template	2009-03-03 10:47:04.000000000 +0000
@@ -8,6 +8,12 @@
         out << renderDateEditor(domainClass,property)
     else if(property.type == Calendar.class)
         out << renderDateEditor(domainClass,property)  
+	else if(org.joda.time.ReadableInstant.class.isAssignableFrom(property.type) || property.type == org.joda.time.LocalDateTime.class)
+		out << renderJodaDateTimeEditor(domainClass,property)
+	else if(property.type == org.joda.time.LocalDate.class)
+		out << renderJodaDateEditor(domainClass,property)
+	else if(property.type == org.joda.time.LocalTime.class)
+		out << renderJodaTimeEditor(domainClass,property)
     else if(property.type == URL.class) 
         out << renderStringEditor(domainClass,property)
     else if(property.isEnum())
@@ -160,6 +166,69 @@
         }
     }
 
+	private renderJodaDateTimeEditor(domainClass,property) {
+		if(!cp) {
+			return "<joda:dateTimePicker name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\"></joda:dateTimePicker>"
+		}
+		else {
+			if(!cp.editable) {
+				return "\${${domainInstance}?.${property.name}?.toString()}"
+			}
+			else {
+				def buf = new StringBuffer('<joda:dateTimePicker ')
+				if(cp.widget) buf << "widget=\"${cp.widget}\" "
+				if(cp.format) buf << "format=\"${cp.format}\" "
+				cp.attributes.each { k,v ->
+					buf << "${k}=\"${v}\" "
+				}
+				buf << "name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)}></joda:dateTimePicker>"
+				return buf.toString()
+			}
+		}
+	}
+
+	private renderJodaDateEditor(domainClass,property) {
+		if(!cp) {
+			return "<joda:datePicker name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\"></joda:datePicker>"
+		}
+		else {
+			if(!cp.editable) {
+				return "\${${domainInstance}?.${property.name}?.toString()}"
+			}
+			else {
+				def buf = new StringBuffer('<joda:datePicker ')
+				if(cp.widget) buf << "widget=\"${cp.widget}\" "
+				if(cp.format) buf << "format=\"${cp.format}\" "
+				cp.attributes.each { k,v ->
+					buf << "${k}=\"${v}\" "
+				}
+				buf << "name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)}></joda:datePicker>"
+				return buf.toString()
+			}
+		}
+	}
+
+	private renderJodaTimeEditor(domainClass,property) {
+		if(!cp) {
+			return "<joda:timePicker name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\"></joda:timePicker>"
+		}
+		else {
+			if(!cp.editable) {
+				return "\${${domainInstance}?.${property.name}?.toString()}"
+			}
+			else {
+				def buf = new StringBuffer('<joda:timePicker ')
+				if(cp.widget) buf << "widget=\"${cp.widget}\" "
+				if(cp.format) buf << "format=\"${cp.format}\" "
+				cp.attributes.each { k,v ->
+					buf << "${k}=\"${v}\" "
+				}
+				buf << "name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)}></joda:timePicker>"
+				return buf.toString()
+			}
+		}
+	}
+
     private renderSelectTypeEditor(type,domainClass,property) {
         if(!cp) {
             return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\"></g:${type}Select>"
